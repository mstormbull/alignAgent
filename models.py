"""
Data models for Company Alignment Facilitator

This module defines the data structures and types used throughout the application.
"""

from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from datetime import datetime
from enum import Enum

class ConversationRole(Enum):
    """Enumeration for conversation participant roles"""
    USER = "user"
    ASSISTANT = "assistant"

@dataclass
class ConversationTurn:
    """Represents a single turn in a conversation"""
    role: ConversationRole
    content: str
    timestamp: datetime = field(default_factory=datetime.now)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        return {
            "role": self.role.value,
            "content": self.content,
            "timestamp": self.timestamp.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ConversationTurn':
        """Create from dictionary"""
        return cls(
            role=ConversationRole(data["role"]),
            content=data["content"],
            timestamp=datetime.fromisoformat(data["timestamp"])
        )

@dataclass
class InterviewSession:
    """Represents an interview session"""
    topic: str
    conversation: List[ConversationTurn] = field(default_factory=list)
    turns: int = 0
    max_turns: int = 5
    is_active: bool = False
    created_at: datetime = field(default_factory=datetime.now)
    
    def add_turn(self, role: ConversationRole, content: str) -> None:
        """Add a new turn to the conversation"""
        turn = ConversationTurn(role=role, content=content)
        self.conversation.append(turn)
        if role == ConversationRole.ASSISTANT:
            self.turns += 1
    
    def is_complete(self) -> bool:
        """Check if the interview is complete"""
        return self.turns >= self.max_turns
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization"""
        return {
            "topic": self.topic,
            "conversation": [turn.to_dict() for turn in self.conversation],
            "turns": self.turns,
            "max_turns": self.max_turns,
            "is_active": self.is_active,
            "created_at": self.created_at.isoformat()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'InterviewSession':
        """Create from dictionary"""
        session = cls(
            topic=data["topic"],
            turns=data["turns"],
            max_turns=data.get("max_turns", 5),
            is_active=data.get("is_active", False),
            created_at=datetime.fromisoformat(data["created_at"])
        )
        session.conversation = [
            ConversationTurn.from_dict(turn_data) 
            for turn_data in data["conversation"]
        ]
        return session

@dataclass
class AlignmentReport:
    """Represents an alignment report"""
    summary: str
    total_interviews: int
    topic: str
    generated_at: datetime = field(default_factory=datetime.now)
    insights: List[str] = field(default_factory=list)
    recommendations: List[str] = field(default_factory=list)
    
    def to_markdown(self) -> str:
        """Convert to markdown format"""
        return f"""# Company Alignment Report

## Executive Summary
{self.summary}

## Analysis Details
- **Total Interviews Analyzed**: {self.total_interviews}
- **Alignment Topic**: {self.topic}
- **Report Generated**: {self.generated_at.strftime('%Y-%m-%d %H:%M:%S')}

## Key Insights
This report synthesizes the perspectives shared during the alignment interviews. The analysis reveals patterns, consensus areas, and potential misalignments that should be addressed to improve organizational alignment.

## Recommendations
Based on the interview analysis, consider the following actions:
1. Address any identified misalignments through targeted communication
2. Build on areas of consensus to strengthen team cohesion
3. Schedule follow-up discussions on specific themes that emerged
4. Consider additional interviews if new questions arise from this analysis

---
*Report generated by Company Alignment Facilitator*
""" 